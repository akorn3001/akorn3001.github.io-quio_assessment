{"version":3,"sources":["calendar.jsx","data_table.jsx","tables.jsx","util.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputDate","handleChange","bind","assertThisInitialized","date","setState","action","filterDate","react_default","a","createElement","es","selected","onChange","placeholderText","dateFormat","isClearable","Component","DataTable","_data","store","isTableOpen","startDate","endDate","getData","resetData","handleStartDate","handleEndDate","handleSubmit","e","_this2","preventDefault","filter","item","moment","_this3","axios","get","url","then","response","data","catch","error","alert","table","button","submitButton","calendars","endDateMinimum","startDateMaximum","subtract","onClick","disabled","getDataButton","className","resetDataButton","id","map","key","value","calendar","endpointName","Tables","bondingTable","data_table","unbondingTable","injectionsTable","batteryTable","temperatureTable","errorsTable","App","href","tables","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b6775978.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { inputDate: null };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(date) {\n    this.setState({\n      inputDate: date,\n    });\n\n    this.props.action(date);\n  }\n\n  render() {\n    let filterDate = (this.props.filterDate ? this.props.filterDate : null);\n\n    return (\n      <DatePicker\n        selected={this.state.inputDate}\n        onChange={this.handleChange}\n        placeholderText={this.props.placeholderText}\n        filterDate={ filterDate }\n        dateFormat=\"YYYY-MM-DD\"\n        isClearable={true}\n        />\n    );\n  }\n}\n\nexport default Calendar;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Calendar from './calendar';\nimport moment from 'moment';\n\n\nclass DataTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      _data: [],\n      store: [],\n      isTableOpen: false,\n      startDate: null,\n      endDate: null\n    };\n\n    this.getData = this.getData.bind(this);\n    this.resetData = this.resetData.bind(this);\n    this.handleStartDate = this.handleStartDate.bind(this);\n    this.handleEndDate = this.handleEndDate.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleStartDate(date) {\n    this.setState({ startDate: date });\n  }\n\n  handleEndDate(date) {\n    this.setState({ endDate: date });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({\n      store: this.state._data.filter((item) => {\n        return moment(item.date) >= this.state.startDate &&\n        moment(item.date) <= this.state.endDate;\n      })\n    });\n  }\n\n  getData(e) {\n    e.preventDefault();\n    axios.get(this.props.url)\n    .then(response => {\n      this.setState({\n        _data: response.data,\n        store: response.data,\n        isTableOpen: true\n      });\n    }).catch(error => alert(error));\n  }\n\n  resetData(e) {\n    e.preventDefault();\n    this.setState({\n      store: this.state._data\n     });\n  }\n\n  render() {\n    let table;\n    let button;\n    let submitButton;\n    let calendars;\n    let endDateMinimum;\n    let startDateMaximum;\n\n    // Conditional handling of valid start and end dates for the calendars\n    if (this.state.startDate && !this.state.endDate) {\n      endDateMinimum = this.state.startDate;\n    } else if (!this.state.startDate && this.state.endDate) {\n      startDateMaximum = this.state.endDate;\n    } else if (!this.state.startDate && !this.state.endDate) {\n      endDateMinimum = moment().subtract(365, 'd');\n      startDateMaximum = moment().subtract(1, 'd');\n    }\n\n    if (this.state.startDate && this.state.endDate) {\n      submitButton = <button onClick={this.handleSubmit}>Submit Date Range</button>;\n    } else {\n      submitButton = <button disabled>Submit Date Range</button>;\n    }\n\n    const getDataButton = <button className=\"getOrHideData\" onClick={this.getData}>Get Data</button>;\n    const resetDataButton = <button className=\"getOrResetData\" onClick={this.resetData}>Reset Table</button>;\n\n    if (this.state.isTableOpen) {\n      table =\n      <table>\n        <tbody>\n          <tr>\n            <th id=\"date-label\">Date</th>\n            <th id=\"value-label\">Value</th>\n          </tr>\n        </tbody>\n        <tbody>{this.state.store.map(function(item, key) {\n            return (\n              <tr key={key}>\n                <td>{item.date}</td>\n                <td>{item.value}</td>\n              </tr>\n            );\n          })}</tbody>\n      </table>;\n\n      button = resetDataButton;\n\n      calendars =\n      <div className=\"calendars\">\n        <span>Start Date: </span>\n        <Calendar\n          action={this.handleStartDate}\n          filterDate={(date) => { return date >= moment().subtract(366, 'd') && date < startDateMaximum; }}\n          placeholderText=\"Pick Start Date\"\n           />\n         <br />\n        <span>End Date: </span>\n        <Calendar\n          action={this.handleEndDate}\n          filterDate={(date) => { return date > endDateMinimum && date <= moment(); }}\n          placeholderText=\"Pick End Date\"\n          />\n        <br />\n        { submitButton }\n      </div>;\n    } else {\n      table = null;\n      calendars = null;\n      button = getDataButton;\n    }\n\n    return (\n      <div>\n        <h3 className=\"table-name\">{this.props.endpointName}</h3>\n        { calendars }\n        { button }\n        { table }\n      </div>\n    );\n  }\n}\n\nexport default DataTable;\n","import React, { Component } from 'react';\nimport DataTable from './data_table.jsx';\nimport * as Util from './util.js';\n\nclass Tables extends Component {\n  render() {\n    const bondingTable = <DataTable endpointName=\"Bonding\" url={Util.bondingURL}/>;\n    const unbondingTable = <DataTable endpointName=\"Unbonding\" url={Util.unbondingURL}/>;\n    const injectionsTable = <DataTable endpointName=\"Injections\" url={Util.injectionsURL}/>;\n    const batteryTable = <DataTable endpointName=\"Battery\" url={Util.batteryURL}/>;\n    const temperatureTable = <DataTable endpointName=\"Temperature\" url={Util.temperatureURL}/>;\n    const errorsTable = <DataTable endpointName=\"Errors\" url={Util.errorsURL}/>;\n\n    return (\n      <div className=\"tables\">\n        {bondingTable}\n        {unbondingTable}\n        {injectionsTable}\n        {batteryTable}\n        {temperatureTable}\n        {errorsTable}\n      </div>\n    );\n  }\n}\n\nexport default Tables;\n","export const bondingURL = \"http://assignment.quio.com/bonding\";\nexport const unbondingURL = \"http://assignment.quio.com/unbonding\";\nexport const injectionsURL = \"http://assignment.quio.com/injections\";\nexport const batteryURL = \"http://assignment.quio.com/battery\";\nexport const temperatureURL = \"http://assignment.quio.com/temperature\";\nexport const errorsURL = \"http://assignment.quio.com/errors\";\n","import React, { Component } from 'react';\nimport Tables from './tables.jsx';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"preamble\">\n          <h1>QuiO Coding Assignment</h1>\n          <h2>Alex Kornfeld</h2>\n          <p>\n            This coding assignment was done using React.JS, bootstrapped\n            with <a href=\"https://github.com/facebook/create-react-app\">create-react-app</a>.\n            The calendars used for submitting a date range are from\n            the <a href=\"https://reactdatepicker.com/\">react-datepicker</a> library.\n            <br />\n            <br />\n            Below are six buttons corresponding to\n            the API endpoints given for this assignment.\n            Rather than making an API call in the componentDidMount lifecycle hook,\n            I opted instead to include buttons which trigger axios requests so that\n            the data is only called when needed. Additionally the use of buttons\n            for this purpose makes it very straightforward to mix and match one\n            or several of the endpoints you'd like to see. I chose axios because\n            it works well with React and has broad browser support.\n            <br />\n            <br />\n            When the <strong>Get Data</strong> button is pressed and the axios\n            request is made, the JSON data is used to populate a table. The table\n            is its own React component with internal state. The data is saved in\n            two slices of the table's internal state - <strong>_data</strong>,\n            and <strong>store</strong>. The <strong>_data</strong> slice of state\n            is meant to hold all the data and never change, avoiding the need for\n            any extra API calls in the future, while the <strong>store</strong> slice\n            of state is meant to reflect any changes from the filtering process.\n            <br />\n            <br />\n            The user will see two calendar inputs for inputting a start date and\n            an end date to create a date range for filtering the tables.\n            I have conditionally allowed for only valid start and end dates to\n            be selected. For instance, only end dates after the selected start\n            date are allowed, and vice versa. After the user has selected both\n            start and end dates, they may submit this date range to see only the\n            data between those dates.\n            <br />\n            <br />\n            To review the code, please visit the <a href=\"https://github.com/akorn3001/quio-assessment\">GitHub for this repository</a>.\n          </p>\n        </div>\n        <Tables />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}